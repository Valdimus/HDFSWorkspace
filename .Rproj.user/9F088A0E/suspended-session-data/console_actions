{
    "data" : [
        "\nR version 3.2.3 (2015-12-10) -- \"Wooden Christmas-Tree\"\nCopyright (C) 2015 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "loadWorkspaceHDFS <- function(filename=\"Rdata\") {",
        "+ ",
        "  message (\"Chargement workspace depuis HDFS\")",
        "+ ",
        "  ",
        "+ ",
        "  # Recuperation de la taille du fichier workspace",
        "+ ",
        "  # pour permettre a pv d'afficher la progression",
        "+ ",
        "  du_output = system(paste(\"hdfs dfs -du\",filename), intern = TRUE)",
        "+ ",
        "  workspace_size = strsplit(du_output, \" \")[[1]][1]",
        "+ ",
        "  ",
        "+ ",
        "  con <- pipe(paste(\"hdfs dfs -cat\",filename,\"| pv --size\",workspace_size), \"rb\")",
        "+ ",
        "  load(envir=.GlobalEnv, file = con)",
        "+ ",
        "  close(con)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "saveWorkspaceHDFS <- function(filename=\"Rdata\") {",
        "+ ",
        "  message (\"Sauvegarde workspace sur HDFS\")",
        "+ ",
        "  ",
        "+ ",
        "  tmp_filename = paste(filename, as.numeric(as.POSIXlt(Sys.time())), sep=\"-\")",
        "+ ",
        "  ",
        "+ ",
        "  # Estimation de la taille du workspace pour donner une idÃ©e de l'avancement",
        "+ ",
        "  # On ne prend pas en compte la compression donc la valeur est largement sur estimÃ©e",
        "+ ",
        "  workspace_size = sum(sapply(ls(envir=.GlobalEnv), function(x)object.size(get(x))))",
        "+ ",
        "  ",
        "+ ",
        "  # FIXME : on utilise pas la taille estimee parce que si elle diffÃ¨re de la",
        "+ ",
        "  # taille reelle, la barre de progression ne va pas jusqu'a 100%. Un utilisateur",
        "+ ",
        "  # va surement se dire que sa sauvegarde n'est pas complete",
        "+ ",
        "  ",
        "+ ",
        "  # FIXME : Il faudrait ne pas sauver les fonctions de load/restore",
        "+ ",
        "  con <- pipe(paste(\"pv | hdfs dfs -put -\",tmp_filename), \"wb\")",
        "+ ",
        "  save(list = ls(envir=.GlobalEnv, all.names = TRUE), file = con)",
        "+ ",
        "  close(con)",
        "+ ",
        "  ",
        "+ ",
        "  system(paste(\"hdfs dfs -rm\", filename), ignore.stderr = TRUE, ignore.stdout = TRUE, intern = TRUE)",
        "+ ",
        "  system(paste(\"hdfs dfs -mv\", tmp_filename, filename))",
        "+ ",
        "}",
        "> ",
        "titi <- \"TOTO\"",
        "> ",
        "saveWorkspaceHDFS()",
        "Sauvegarde workspace sur HDFS\n",
        "sh: 1: hdfs: not found\n",
        "Error in system(paste(\"hdfs dfs -rm\", filename), ignore.stderr = TRUE,  : \n  error in running command\n",
        "> ",
        "loadWorkspaceHDFS <- function(filename=\"Rdata\") {",
        "+ ",
        "  message (\"Chargement workspace depuis HDFS\")",
        "+ ",
        "",
        "+ ",
        "  # Recuperation de la taille du fichier workspace",
        "+ ",
        "  # pour permettre a pv d'afficher la progression",
        "+ ",
        "  du_output = system(paste(\"hdfs dfs -du\",filename), intern = TRUE)",
        "+ ",
        "  workspace_size = strsplit(du_output, \" \")[[1]][1]",
        "+ ",
        "",
        "+ ",
        "  con <- pipe(paste(\"/opt/hadoop-3.0.0-alpha4/bin/hdfs dfs -cat\",filename,\"| pv --size\",workspace_size), \"rb\")",
        "+ ",
        "  load(envir=.GlobalEnv, file = con)",
        "+ ",
        "  close(con)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "saveWorkspaceHDFS <- function(filename=\"Rdata\") {",
        "+ ",
        "  message (\"Sauvegarde workspace sur HDFS\")",
        "+ ",
        "",
        "+ ",
        "  tmp_filename = paste(filename, as.numeric(as.POSIXlt(Sys.time())), sep=\"-\")",
        "+ ",
        "",
        "+ ",
        "  # Estimation de la taille du workspace pour donner une idÃ©e de l'avancement",
        "+ ",
        "  # On ne prend pas en compte la compression donc la valeur est largement sur estimÃ©e",
        "+ ",
        "  workspace_size = sum(sapply(ls(envir=.GlobalEnv), function(x)object.size(get(x))))",
        "+ ",
        "",
        "+ ",
        "  # FIXME : on utilise pas la taille estimee parce que si elle diffÃ¨re de la",
        "+ ",
        "  # taille reelle, la barre de progression ne va pas jusqu'a 100%. Un utilisateur",
        "+ ",
        "  # va surement se dire que sa sauvegarde n'est pas complete",
        "+ ",
        "",
        "+ ",
        "  # FIXME : Il faudrait ne pas sauver les fonctions de load/restore",
        "+ ",
        "  con <- pipe(paste(\"pv | /opt/hadoop-3.0.0-alpha4/bin/hdfs dfs -put -\",tmp_filename), \"wb\")",
        "+ ",
        "  save(list = ls(envir=.GlobalEnv, all.names = TRUE), file = con)",
        "+ ",
        "  close(con)",
        "+ ",
        "",
        "+ ",
        "  system(paste(\"/opt/hadoop-3.0.0-alpha4/bin/hdfs dfs -rm\", filename), ignore.stderr = TRUE, ignore.stdout = TRUE, intern = TRUE)",
        "+ ",
        "  system(paste(\"/opt/hadoop-3.0.0-alpha4/bin/hdfs dfs -mv\", tmp_filename, filename))",
        "+ ",
        "}",
        "> ",
        "saveWorkspaceHDFS()",
        "Sauvegarde workspace sur HDFS\n",
        "ERROR: JAVA_HOME is not set and could not be found.\n",
        "ERROR: JAVA_HOME is not set and could not be found.\n",
        "Warning message:\n",
        "running command '/opt/hadoop-3.0.0-alpha4/bin/hdfs dfs -rm Rdata >/dev/null 2>/dev/null' had status 1 \n",
        "> ",
        "system('source ~/.bashrc')",
        "sh: 1: source: not found\n",
        "> ",
        "system('source ~/.profile')",
        "sh: 1: source: not found\n",
        "> ",
        "system('source /etc/profile.d/modules.sh')",
        "sh: 1: source: not found\n",
        "> ",
        "system('shopt -s expanded_aliases)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "''",
        "+ ",
        "'",
        "Error: unexpected string constant in:\n\"''\n'\"\n",
        "> ",
        "system2()",
        "Error in shQuote(command) : \n  argument \"command\" is missing, with no default\n",
        "> ",
        "system2(\"hdfs dfs -ls\")",
        "sh: 1: hdfs dfs -ls: not found\n",
        "> ",
        "system2(\"echo 'Hello'\")",
        "sh: 1: echo 'Hello': not found\n",
        "> ",
        "system(\"ls\")",
        "DESCRIPTION\nman\nNAMESPACE\nR\nRHDFSHome.Rproj\n",
        "> ",
        "system(\"source\")",
        "sh: 1: source: not found\n",
        "> ",
        "system(\"/usr/bin/source\")",
        "sh: 1: ",
        "/usr/bin/source: not found",
        "\n",
        "> ",
        "Sys.getenv(â€˜R_HOMEâ€™)",
        "Error: unexpected input in \"Sys.getenv(â\"\n",
        "> ",
        "Sys.getenv(\"R_HOME\")",
        "[1] \"/usr/lib/R\"\n",
        "> ",
        "system(\"echo $PATH\")",
        "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n",
        "> ",
        "Sys.which(c(\"hdfs\"\"))",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        ")",
        "+ ",
        "\"\"",
        "Error: unexpected string constant in:\n\")\n\"\"\n",
        "> ",
        "Sys.which(c(\"hdfs\"))",
        "hdfs \n  \"\" \n",
        "> ",
        "run <- function(command) {",
        "+ ",
        "  system(paste(\"/bin/bash -c\", shQuote(command)))",
        "+ ",
        "}",
        "> ",
        "run(\"hdfs dfs -ls\")",
        "/bin/bash: hdfs: command not found\n",
        "> ",
        "run(\"source ~/.bashrc\")",
        "> ",
        "run(\"hdfs dfs -ls\")",
        "/bin/bash: hdfs: command not found\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3
    ]
}